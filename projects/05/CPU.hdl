// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluOut, load=loadD, out=d);
    
    // based on instruction type, either load the value encoded in the instruction or the value from the alu
    Mux16(a[0..14]=instruction[0..14],a[15]=false, b=aluOut, sel=instruction[15], out=aIn);
    // load if we either have a @ Instruction or want to save the value of the alu output
    Not(in=instruction[15],out=addressInstruction);
    Or(a=addressInstruction, b=instruction[5], out=loadA);
    ARegister(in=aIn, load=loadA, out=address, out[0..14]=addressM);

    // Supply the Alu with a or m, as encoded in the instruction
    Mux16(a=address, b=inM, sel=instruction[12], out=mOrA);
    // fill the alu with d and one of the other values and the control bits from the instruction
    ALU(x=d, y=mOrA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM,out=aluOut, zr=aluOutZr, ng=aluOutNg);   

    And(a=instruction[15], b=instruction[3], out=writeM);

    // instruction 13 = j1 less
    // instruction 14 = j2 equal
    // instruction 15 = j3 greater

    Or(a=aluOutNg, b=aluOutZr, out=aluOutNotGt0);
    Not(in=aluOutNotGt0, out=aluOutGt0);

    Mux(a=false, b=aluOutNg, sel=instruction[2], out=ltSatisfied);
    Mux(a=false, b=aluOutZr, sel=instruction[1], out=eqSatisfied);
    Mux(a=false, b=aluOutGt0, sel=instruction[0],  out=gtSatisfied);

    Or(a=ltSatisfied, b=eqSatisfied, out=lteqSatisfied);
    Or(a=lteqSatisfied, b=gtSatisfied, out=jumpSatisfied);
    And(a=instruction[15], b=jumpSatisfied, out=jump);

    PC(in=address, load=jump, inc=true, reset=reset, out[0..14]=pc,out=pcout);
    }